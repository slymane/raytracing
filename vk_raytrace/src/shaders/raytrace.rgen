#version 460
#extension GL_NV_ray_tracing : require

#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"
#include "random.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;

layout(binding = 0, set = 1) uniform CameraProperties
{
  mat4 view;
  mat4 proj;
  mat4 viewInverse;
  mat4 projInverse;
}
cam;

// The payload which is shared between recursive invocations of traceNV
// Used to pass back any results from a specific trace, usually just the hitValue
layout(location = 0) rayPayloadNV hitPayload prd;

// Uniform constants passed from the application, specifying ray tracing parameters
layout(push_constant) uniform Constants
{
  vec4  clearColor;
  vec3  lightPosition;
  float lightIntensity;
  int   lightType;
  int   frameCounter; // Counts up as long as scene doesn't change, resets to 0 upon scene change
  bool  pathTrace;
}
pushC;

// The job of this shader is to generate a ray, and then call traceNV, and write the pixel into the buffer
void main()
{
    vec3 hitVal = vec3(0.0);
    prd.seed = tea(gl_LaunchIDNV.y * gl_LaunchSizeNV.x + gl_LaunchIDNV.x, pushC.frameCounter);

    // Multisampling loop
    const int SAMPLES_PER_PIXEL = 1;
    for (int i = 0; i < SAMPLES_PER_PIXEL; i++)
    {
        // Use pixel center for first draw each time scene changes
        float r1 = rnd(prd.seed);
        float r2 = rnd(prd.seed);
        vec2 subpixelJitter = pushC.frameCounter == 0 ? vec2(0.5f, 0.5f) : vec2(r1, r2);

        const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + subpixelJitter;
        const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeNV.xy);
        // Scale from 0 - 1 to -1 - 1
        vec2 d = inUV * 2.0 - 1.0;
        vec4 origin    = cam.viewInverse * vec4(0, 0, 0, 1);
        vec4 target    = cam.projInverse * vec4(d.x, d.y, 1, 1);
        vec4 direction = cam.viewInverse * vec4(normalize(target.xyz), 0);
        uint  rayFlags = gl_RayFlagsOpaqueNV;
        float tMin     = 0.001;
        float tMax     = 10000.0;

        prd.recursionDepth = 8;
        prd.hitValue = vec3(0);
        prd.attenuation = vec3(1.f);

        // Closest hit shader selection - 0 = raytrace.rchit, 1 = pathtrace.rchit
        int hitOffset = pushC.pathTrace ? 1 : 0;

        traceNV(topLevelAS, // acceleration structure
            rayFlags,       // rayFlags
            0xFF,           // cullMask
            hitOffset,      // sbtRecordOffset
            0,              // sbtRecordStride
            0,              // missIndex
            origin.xyz,     // ray origin
            tMin,           // ray min range
            direction.xyz,  // ray direction
            tMax,           // ray max range
            0               // payload (location = 0)
            );
        hitVal += prd.hitValue;
    }

    hitVal /= SAMPLES_PER_PIXEL;

    if (pushC.frameCounter > 0)
    {
        float proportion = 1.0f / float(pushC.frameCounter + 1);
        vec3 newCol = mix(imageLoad(image, ivec2(gl_LaunchIDNV.xy)).xyz, hitVal, proportion);
        imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(newCol, 1.0));
    }
    else
    {
        imageStore(image, ivec2(gl_LaunchIDNV.xy), vec4(hitVal, 1.0));
    }
}
